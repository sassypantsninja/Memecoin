// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract FoxyMemeCoin is ERC20, Ownable {
    uint256 public maxSupply = 1_000_000_000 * 10 ** decimals();
    uint256 public transferFee = 1; // 1% transfer fee
    address public feeRecipient;

    event FeeRecipientChanged(address indexed oldRecipient, address indexed newRecipient);
    event TransferFeeUpdated(uint256 oldFee, uint256 newFee);

    constructor(address _feeRecipient) ERC20("Foxy Meme Coin", "FOXY") {
        require(_feeRecipient != address(0), "Invalid fee recipient address");
        feeRecipient = _feeRecipient;
        _mint(msg.sender, maxSupply);
    }

    function setFeeRecipient(address _newRecipient) external onlyOwner {
        require(_newRecipient != address(0), "Invalid address");
        emit FeeRecipientChanged(feeRecipient, _newRecipient);
        feeRecipient = _newRecipient;
    }

    function setTransferFee(uint256 _newFee) external onlyOwner {
        require(_newFee <= 5, "Fee too high"); // Cap at 5%
        emit TransferFeeUpdated(transferFee, _newFee);
        transferFee = _newFee;
    }

    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal override {
        uint256 feeAmount = (amount * transferFee) / 100;
        uint256 amountAfterFee = amount - feeAmount;

        super._transfer(sender, recipient, amountAfterFee);

        if (feeAmount > 0) {
            super._transfer(sender, feeRecipient, feeAmount);
        }
    }

    function burn(uint256 amount) external {
        _burn(msg.sender, amount);
    }
}
