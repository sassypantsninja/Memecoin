// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract FartMemeCoin is ERC20, Ownable {
    uint256 public constant MAX_SUPPLY = 1_000_000_000 * 10 ** 18; // 1 billion tokens
    uint256 public transferFeePercent = 2; // 2% transfer fee
    address public feeRecipient;

    event TransferFeeChanged(uint256 newFee);
    event FeeRecipientChanged(address newRecipient);

    constructor(address _feeRecipient) ERC20("Fart MemeCoin", "FART") {
        require(_feeRecipient != address(0), "Invalid fee recipient address");
        feeRecipient = _feeRecipient;
        _mint(msg.sender, MAX_SUPPLY); // Mint the total supply to the contract deployer
    }

    function setTransferFeePercent(uint256 _newFee) external onlyOwner {
        require(_newFee <= 5, "Fee too high"); // Cap transfer fee at 5%
        transferFeePercent = _newFee;
        emit TransferFeeChanged(_newFee);
    }

    function setFeeRecipient(address _newRecipient) external onlyOwner {
        require(_newRecipient != address(0), "Invalid address");
        feeRecipient = _newRecipient;
        emit FeeRecipientChanged(_newRecipient);
    }

    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal override {
        uint256 feeAmount = (amount * transferFeePercent) / 100;
        uint256 amountAfterFee = amount - feeAmount;

        super._transfer(sender, recipient, amountAfterFee);

        if (feeAmount > 0) {
            super._transfer(sender, feeRecipient, feeAmount);
        }
    }

    function burn(uint256 amount) external {
        _burn(msg.sender, amount);
    }
}
