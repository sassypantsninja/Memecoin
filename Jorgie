use solana_program::{
    account_info::{next_account_info, AccountInfo},
    entrypoint,
    entrypoint::ProgramResult,
    pubkey::Pubkey,
    msg,
};
use spl_token::{
    instruction::{initialize_mint, mint_to},
    ID as SPL_TOKEN_PROGRAM_ID,
};

// Entrypoint for the program
entrypoint!(process_instruction);

/// Processes instructions to create and mint the Jorgie memecoin
fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    _instruction_data: &[u8],
) -> ProgramResult {
    msg!("Starting the Jorgie Memecoin creation...");

    // Parse accounts
    let account_info_iter = &mut accounts.iter();
    let mint_account = next_account_info(account_info_iter)?;  // Mint account for the token
    let rent_account = next_account_info(account_info_iter)?; // Rent system account
    let owner_account = next_account_info(account_info_iter)?; // Owner of the token mint

    // Log token initialization
    msg!("Initializing the Jorgie token mint...");

    // Set decimals for Jorgie memecoin
    let decimals = 9; // This allows fractional units of the token

    // Initialize the mint account for the Jorgie token
    initialize_mint(
        &SPL_TOKEN_PROGRAM_ID,
        mint_account.key,
        owner_account.key,       // Mint authority
        Some(owner_account.key), // Freeze authority (optional)
        decimals,
    )?;

    // Mint the initial supply of Jorgie tokens
    let initial_supply: u64 = 5_000_000_000 * 10u64.pow(decimals as u32); // Example: 5 billion tokens
    msg!("Minting initial supply of Jorgie tokens...");
    mint_to(
        &SPL_TOKEN_PROGRAM_ID,
        mint_account.key,
        owner_account.key,
        owner_account.key,
        &[], // Signer keys
        initial_supply,
    )?;

    msg!("Jorgie Memecoin successfully created!");
    Ok(())
}
