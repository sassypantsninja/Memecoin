// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract FwogMemeCoin is ERC20, Ownable {
    uint256 public constant MAX_SUPPLY = 10_000_000_000 * 10 ** 18; // 10 billion Fwog tokens
    uint256 public transferFeePercent = 3; // 3% transfer fee
    address public pondWallet; // Wallet for collecting fees (e.g., community rewards)

    event TransferFeeUpdated(uint256 newFee);
    event PondWalletUpdated(address newWallet);

    constructor(address _pondWallet) ERC20("Fwog MemeCoin", "FWOG") {
        require(_pondWallet != address(0), "Invalid pond wallet address");
        pondWallet = _pondWallet;
        _mint(msg.sender, MAX_SUPPLY); // Mint all tokens to the deployer initially
    }

    function setTransferFeePercent(uint256 _newFee) external onlyOwner {
        require(_newFee <= 5, "Fee too high (max 5%)");
        transferFeePercent = _newFee;
        emit TransferFeeUpdated(_newFee);
    }

    function setPondWallet(address _newWallet) external onlyOwner {
        require(_newWallet != address(0), "Invalid pond wallet address");
        pondWallet = _newWallet;
        emit PondWalletUpdated(_newWallet);
    }

    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal override {
        uint256 feeAmount = (amount * transferFeePercent) / 100;
        uint256 amountAfterFee = amount - feeAmount;

        super._transfer(sender, recipient, amountAfterFee);

        if (feeAmount > 0) {
            super._transfer(sender, pondWallet, feeAmount);
        }
    }

    function burn(uint256 amount) external {
        _burn(msg.sender, amount);
    }
}
