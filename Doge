// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract DogeToken is ERC20, Ownable {
    uint256 public constant INITIAL_SUPPLY = 100_000_000 * (10 ** 18); // 100 million tokens
    uint256 public transferFee = 2; // 2% transfer fee
    address public feeRecipient;

    constructor() ERC20("DogeCoin", "DOGE") {
        _mint(msg.sender, INITIAL_SUPPLY); // Mint initial supply to creator
        feeRecipient = msg.sender; // Owner initially receives fees
    }

    // Override transfer function to include transfer fee
    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        uint256 feeAmount = (amount * transferFee) / 100;
        uint256 amountAfterFee = amount - feeAmount;

        // Transfer fee to recipient
        _transfer(_msgSender(), feeRecipient, feeAmount);
        // Transfer the remaining tokens to the recipient
        _transfer(_msgSender(), recipient, amountAfterFee);

        return true;
    }

    // Allow owner to change the transfer fee
    function setTransferFee(uint256 newFee) external onlyOwner {
        require(newFee <= 5, "Fee cannot exceed 5%");
        transferFee = newFee;
    }

    // Allow owner to set a new fee recipient
    function setFeeRecipient(address newRecipient) external onlyOwner {
        feeRecipient = newRecipient;
    }

    // Allow owner to burn tokens (reduces total supply)
    function burn(uint256 amount) external onlyOwner {
        _burn(msg.sender, amount);
    }
}
