// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract ActMemeCoin is ERC20, Ownable {
    uint256 public constant MAX_SUPPLY = 1_000_000_000 * 10 ** 18; // 1 billion ACT tokens
    uint256 public transferFeePercent = 1; // 1% transfer fee (default)
    address public communityFund; // Address for collecting fees

    event TransferFeeUpdated(uint256 newFee);
    event CommunityFundUpdated(address newFund);

    constructor(address _communityFund) ERC20("ACT MemeCoin", "ACT") {
        require(_communityFund != address(0), "Invalid community fund address");
        communityFund = _communityFund;
        _mint(msg.sender, MAX_SUPPLY); // Mint total supply to contract deployer
    }

    function setTransferFeePercent(uint256 _newFee) external onlyOwner {
        require(_newFee <= 5, "Fee too high; max is 5%");
        transferFeePercent = _newFee;
        emit TransferFeeUpdated(_newFee);
    }

    function setCommunityFund(address _newFund) external onlyOwner {
        require(_newFund != address(0), "Invalid address");
        communityFund = _newFund;
        emit CommunityFundUpdated(_newFund);
    }

    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal override {
        uint256 feeAmount = (amount * transferFeePercent) / 100;
        uint256 amountAfterFee = amount - feeAmount;

        super._transfer(sender, recipient, amountAfterFee);

        if (feeAmount > 0) {
            super._transfer(sender, communityFund, feeAmount);
        }
    }

    function burn(uint256 amount) external {
        _burn(msg.sender, amount);
    }
}
